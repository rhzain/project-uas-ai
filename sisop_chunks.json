["System Call dan Struktur S.O\n\nKomponen-komponen Sistem\n• Manajemen Proses\n• Manajemen Memori Utama\n• Manajemen I/O\n• Manajemen Berkas( file)\n\nPelayanan Sistem Operasi\n• Dapat melayani programmer sehingga dapat melakukan\npemrograman dengan mudah\n• Eksekusi Program\n• Memanggil, menjalankan dan mengakhiri\n• Operasi-operasi I/O\n• Kemungkinan I/O dibutuhkan pada saat running program, pengontrolan dilakukan SO\n• Manipulasi sistem file\n• Create, read , write, delete\n• Komunikasi\n• Pertukaran data oleh beberapa proses dalam 1 komputer/ lebih (sistem jaringan)\n• Mendeteksi kesalahan\n\nSystem Call\n• Hubungan antara S.O. dgn user program dilakukan melalui ‘extended\ninstruction’ yg disebut dengan : system call atau API (Application\nProgramming Interface)\n• System call adalah tata cara pemanggilan di pr", "m call atau API (Application\nProgramming Interface)\n• System call adalah tata cara pemanggilan di program aplikasi untuk\nmemperoleh layanan yang disediakan oleh sistem operasi\n\nPosisi System Call\n• Posisi system calls itu sendiri berada di antara kernel dan executable program\natau program yang sedang berjalan\n\nSystem Call\n• Dikelompokkan dalam 5 Kategori :\n• Kontrol Proses\n• Manipulasi File\n• Manipulasi Device\n• Informasi Lingkungan\n• Komunikasi\n\nKontrol Proses\n• Mengakhiri (end) dan membatalkan (abort)\n• Mengambil (load) dan eksekusi (execute)\n• Membuat dan mengakhiri proses\n• Menentukan dan mengeset atribut proses\n• Wait for time\n• Wait event, signal event\n• Mengalokasikan dan membebaskan memori\n\nManipulasi File\n• Membuat dan menghapus file\n• Membuka dan menutup file\n• Membaca, menulis, ", "memori\n\nManipulasi File\n• Membuat dan menghapus file\n• Membuka dan menutup file\n• Membaca, menulis, dan mereposisi file\n• Menentukan dan mengeset atribut file\n\nManipulasi Device\n• Meminta dan membebaskan device\n• Membaca, menulis dan mereposisi\n• Menentukan dan mengeset atribut device\n\nInformasi Lingkungan\n• Mengambil atau mengeset waktu atau tanggal\n• Mengambil atau mengeset sistem data\n• Mengambil dan mengeset proses, file atau atribut-atribut device\n\nKomunikasi\n• Membuat dan menghapus sambungan komunikasi\n• Mengirim dan menerima pesan\n• Mentransfer status informasi\n\n2 Model Komunikasi\n• Message-passing model\n• Informasi saling ditukarkan melalui fasilitas yang ditentukan oleh SO\n• Shared-memory model\n• Proses menggunakan map memory untuk mengakses daerah-daerah di\nmemori dengan proses-p", "memory model\n• Proses menggunakan map memory untuk mengakses daerah-daerah di\nmemori dengan proses-proses yang lain.\n\nSistem Program\n• Manipulasi file\n• (membuat,menghapus, mengcopy, rename, print, dump, list file dan direktori)\n• Status Informasi\n• Tanggal, waktu, penggunaan memori atau diskspace, banyaknya user\n• Modifikasi File\n• Editor sebagai sarana pendukung untuk menulis atau memodifikasi file\n• Bahasa Pemrograman yang mendukung\n• Compiler dan interpreter ( Fortran, Cobol, pascal,  Basic, C)\n• Pemanggilan dan eksekusi program\n• Pada saat dicompile, dipanggil ke memori untuk dieksekusi. Absolute loader, debugging\n• Komunikasi\n• Membuat hubungan virtual antar proses user,  dan sistem komputer yang berbeda\n• Program-program aplikasi\n• Mendukung program2 umum, seperti kompiler, spreadsh", "mputer yang berbeda\n• Program-program aplikasi\n• Mendukung program2 umum, seperti kompiler, spreadsheet, pengolah kata, statistik,\ngames\n\nStruktur Sistem Operasi\n• Struktur Sederhana\n• Monolithic System\n• Pendekatan Berlapis\n• Mesin Virtual\n• Model Client Server\n\nSistem Sederhana\n• Tidak memiliki struktur dengan baik\n• Sangat kecil, sederhana dan banyak keterbatasan\n• Terbatas pada hardware\n• Contoh Minix(kernel micro), Qemu (Emulator perangkat keras)\n\nSistem Monolithic\n• Struktur sederhana yang dilengkapi dengan operasi dual-mode\n• Pelayanan (system call) : mengambil sejumlah parameter pada\ntempat yang telah ditentukan sebelumnya seperti register atau stack,\nkemudian mengeksekusi suatu instruksi trap tertentu pada monitor\nmode\n• Contoh : Unix, Linux, MS-DOS\n\nStruktur Sistem Monolithic\n1. ", "ruksi trap tertentu pada monitor\nmode\n• Contoh : Unix, Linux, MS-DOS\n\nStruktur Sistem Monolithic\n1. User program mengeksekusi instruksi trap ke kernel\n2. S.O mengecek parameter untuk menentukan service (system call yang dipanggil)\n3. S.O mengalokasikan dan memanggil service procedure\n4. Kontrol dikembalikan ke user program\nUser Program 2\nUser Program 1\nKernell Call\n4\n1                3\nservice\n2                                             procedure\nDispatch\nTable\nservice\nUser Program\nRuns in\nUser Mode\nOperating System\nruns in\nKernel Mode\n\nSistem Berlapis (Layered System)\n• Sistem operasi dibagi menjadi sejumlah lapisan yang masing-masing\ndibangun di atas lapisan yang lebih rendah.\n• Lapisan yang lebih rendah menyediakan layanan untuk lapisan yang\nlebih tinggi.\n• Lapisan yang paling bawah a", "yang lebih rendah menyediakan layanan untuk lapisan yang\nlebih tinggi.\n• Lapisan yang paling bawah adalah perangkat keras, dan yang paling\ntinggi adalah user-interface .\n• Cth : Windows NT/2000/ 7/8/10/11\n\nSistem Berlapis (Layered System)\n✓Contoh :\n•Sistem Operasi THE (Technique Hogesschool Endiche), Djikstra, 1968.\n•Sistem Operasi MULTICS (menggunakan concentric rings).\n•Sistem Operasi VENUS\n•OS/2\n\nTHE\nLayer\nFunction\n5\nThe Operator\n4\nUser Programs\n3\nI/O Management\n2\nOperator-Process Communication\n1\nMemory & Drum Management\n0\nProcessor Allocation & Multiprogramming\n\n• Lapisan 0. Mengatur alokasi prosesor, pertukaran antar proses ketika\ninterupsi terjadi atau waktu habis. Lapisan ini mendukung dasar\nmulti-programming pada CPU.\n• Lapisan 1. Mengalokasikan ruang untuk proses di memori utama d", "g dasar\nmulti-programming pada CPU.\n• Lapisan 1. Mengalokasikan ruang untuk proses di memori utama dan\npada 512 kilo word drum yang digunakan untuk menahan bagian\nproses ketika tidak ada ruang di memori utama.\n• Lapisan 2. Menangani komunikasi antara masing-masing proses dan\noperator console. Pada lapis ini masing-masing proses secara efektif\nmemiliki opertor console sendiri.\n• Lapisan 3. Mengatur peranti I/O dan menampung informasi yang\nmengalir dari dan ke proses tersebut.\n• Lapisan 4. Tempat program pengguna. Pengguna tidak perlu\nmemikirkan tentang proses, memori, console, atau manajemen M/K.\n• Lapisan 5. Merupakan operator sistem.\n\nVENUS\nLayer\nFunction\n6\nThe Operator\n5\nUser Programs\n4\nDevice Driver/ Scheduler\n3\nI/O Management\n2\nPenjadwalan CPU\n1\nInstruksi Interpreter\n0\nHardware\n\nMULTIC", "vice Driver/ Scheduler\n3\nI/O Management\n2\nPenjadwalan CPU\n1\nInstruksi Interpreter\n0\nHardware\n\nMULTICS\n\nIBM OS/2\n\nSistem dengan Mesin Maya (Virtual Machines)\n• Konsep : Awalnya struktur ini membuat seolah-olah user mempunyai seluruh\nkomputer dengan simulasi atas pemroses yang digunakan.\n• Sistem operasi melakukan simulasi mesin nyata.\n• Mesin hasil simulasi digunakan user, mesin maya merupakan tiruan 100% atas\nmesin nyata.\n• Semua user diberi ilusi mempunyai satu mesin yang sama-sama canggih.\n• Contoh:\n• CP/CMS\n• VM/370\n• Virtual Machine Monitor\n• CMS (Conversational Monitor Stem)\n• VMWare\n\nVirtual Mesin\nTanpa Virtual Mesin\nDengan Virtual Mesin\n\nSistem dengan Client-Server\n• Konsep : Server adalah proses yang menyediakan layanan, dan Client\nadalah proses yang memerlukan / meminta layanan.\n•", "dalah proses yang menyediakan layanan, dan Client\nadalah proses yang memerlukan / meminta layanan.\n• Proses client yang memerlukan layanan mengirim pesan ke server dan\nmenanti pesan jawaban.\n• Proses server setelah melakukan tugas yang diminta, mengirim hasil\ndalam bentuk pesan jawaban ke proses client.\n• Server hanya menanggapi permintaan client dan tidak memulai\npercakapan dengan client”.\n\n\n\nSoal Latihan\n1. Sebutkan aktivitas-aktivitas yang dilakukan pada manajemen proses\n2. Sebutkan aktivitas-aktivitas yang dilakukan pada manajemen memori\n3. Apakah system call?\n4. Jelaskan dengan singkat tentang system call dalam Sistem Operasi?\n5. Jelaskan tentang keuntungan digunakannya struktur SO terlapis?\n6. Jelaskan tentang  keuntungan digunakannya struktur SO dengan Virtual\nmachine?\n7. Bagaimana ", "apis?\n6. Jelaskan tentang  keuntungan digunakannya struktur SO dengan Virtual\nmachine?\n7. Bagaimana dengan OS Windows, apakah termasuk ke dalam struktur\nberlapis?jelaskan\n8. Jelaskan dengan singkat tentang struktur SO Client-Server?\n9. Jelaskan tentang Shared-memory model pada Model Komunikasi\n\n"]